@page "/landing-zones/{workloadId:int}"
@inject WorkloadService WorkloadService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Landing Zones</h3>

@if (workload != null)
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a @onclick="NavigateToWorkloads">Workloads</a></li>
            <li class="breadcrumb-item active" aria-current="page">@workload.Name</li>
        </ol>
    </nav>

    <div class="mb-3">
        <button class="btn btn-secondary mb-3" @onclick="NavigateToWorkloads">
            ‚Üê Back to Workload
        </button>

        <h5>Workload: @workload.Name</h5>
    </div>
}

<button class="btn btn-primary mb-3" @onclick="NavigateToAddLandingZone">
    Add Landing Zone
</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Environment</th>
            <th>Region</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var landingZone in landingZones)
        {
            <tr>
                <td>@landingZone.Name</td>
                <td>@landingZone.EnvironmentTypeName</td>
                <td>@landingZone.RegionName</td>
                <td>
                    <button class="btn btn-sm btn-link" @onclick="() => NavigateToResources(landingZone.WorkloadEnvironmentRegionId)">
                        View Resources
                    </button>
                    <button class="btn btn-sm btn-warning" @onclick="() => NavigateToEditLandingZone(landingZone.WorkloadEnvironmentRegionId)">
                        Edit
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteLandingZone(landingZone.WorkloadEnvironmentRegionId)">
                        Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter] public int WorkloadId { get; set; }
    private WorkloadDto? workload = null;
    private List<WorkloadEnvironmentRegionDto> landingZones = new();

    protected override async Task OnInitializedAsync()
    {
        // Fetch workload details
        workload = await WorkloadService.GetWorkloadByIdAsync(WorkloadId);

        // Fetch landing zones for the workload
        landingZones = await WorkloadService.GetLandingZonesForWorkloadAsync(WorkloadId);
    }

    private void NavigateToAddLandingZone()
    {
        Navigation.NavigateTo($"/add-landing-zone/{WorkloadId}");
    }

    private void NavigateToResources(int landingZoneId)
    {
        Navigation.NavigateTo($"/resources/{landingZoneId}");
    }

    private void NavigateToEditLandingZone(int landingZoneId)
    {
        Navigation.NavigateTo($"/edit-landing-zone/{landingZoneId}");
    }

    private async Task DeleteLandingZone(int landingZoneId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this landing zone?" });
        if (confirmed)
        {
            await WorkloadService.DeleteLandingZoneAsync(landingZoneId);
            landingZones = await WorkloadService.GetLandingZonesForWorkloadAsync(WorkloadId); // Refresh list
        }
    }

    private void NavigateToWorkloads()
    {
        Navigation.NavigateTo("/workloads");
    }
}