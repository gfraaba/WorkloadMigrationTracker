@page "/workloads"
@inject WorkloadService WorkloadService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Workloads</h3>

<button class="btn btn-primary mb-3" @onclick="NavigateToAddWorkload">
    Add Workload
</button>

<div class="row">
    @foreach (var workload in workloads)
    {
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@workload.Name</h5>
                    <p class="card-text">@workload.Description</p>
                    <p class="card-text">
                        <strong>Landing Zones:</strong> @workload.LandingZonesCount
                    </p>
                    <p class="card-text">
                        <strong>Resources:</strong> @workload.ResourcesCount
                    </p>
                    <div class="d-flex justify-content-between align-items-center">
                        <button class="btn btn-link" @onclick="() => ToggleLandingZones(workload.WorkloadId)">
                            @((expandedWorkloadId == workload.WorkloadId) ? "Hide Details" : "View Details")
                        </button>
                        @* <div class="btn-group"> <!-- Couldn't add enough space between buttons! Vertical stacking with d-flex and flex-column seems to be a better option! -->
                            <button class="btn btn-sm btn-success" @onclick="() => NavigateToAddLandingZone(workload.WorkloadId)">
                                Add Landing Zone
                            </button>
                            <button class="btn btn-sm btn-warning" @onclick="() => NavigateToEditWorkload(workload.WorkloadId)">
                                Edit Workload
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteWorkload(workload.WorkloadId)">
                                Delete Workload
                            </button>
                        </div> *@
                        <div class="d-flex flex-column">
                            <button class="btn btn-sm btn-success mb-2" @onclick="() => NavigateToAddLandingZone(workload.WorkloadId)">
                                Add Landing Zone
                            </button>
                            <button class="btn btn-sm btn-warning mb-2" @onclick="() => NavigateToEditWorkload(workload.WorkloadId)">
                                Edit Workload
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteWorkload(workload.WorkloadId)">
                                Delete Workload
                            </button>
                        </div>
                    </div>
                </div>
                @if (expandedWorkloadId == workload.WorkloadId)
                {
                    <div class="card-footer">
                        <h6>Landing Zones</h6>
                        <ul>
                            @foreach (var landingZone in workload.WorkloadEnvironmentRegions)
                            {
                                <li>
                                    @landingZone.Name [@landingZone.EnvironmentTypeName - @landingZone.RegionName]
                                    <button class="btn btn-sm btn-link" @onclick="() => NavigateToLandingZones(workload.WorkloadId)">
                                        Manage Landing Zones
                                    </button>
                                    <button class="btn btn-sm btn-link" @onclick="() => NavigateToResources(landingZone.WorkloadEnvironmentRegionId)">
                                        View Resources
                                    </button>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<WorkloadDto> workloads = new();
    private int? expandedWorkloadId = null;

    protected override async Task OnInitializedAsync()
    {
        workloads = await WorkloadService.GetWorkloadsAsync();
    }

    private void ToggleLandingZones(int workloadId)
    {
        expandedWorkloadId = expandedWorkloadId == workloadId ? null : workloadId;
    }

    private void NavigateToAddWorkload()
    {
        Navigation.NavigateTo("/workloads/add");
    }

    private void NavigateToAddLandingZone(int workloadId)
    {
        Navigation.NavigateTo($"/add-landing-zone/{workloadId}");
    }

    private void NavigateToEditWorkload(int workloadId)
    {
        Navigation.NavigateTo($"/workloads/edit/{workloadId}");
    }

    private async Task DeleteWorkload(int workloadId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this workload?" });
        if (confirmed)
        {
            await WorkloadService.DeleteWorkloadAsync(workloadId);
            workloads = await WorkloadService.GetWorkloadsAsync(); // Refresh list
        }
    }

    private void NavigateToLandingZones(int workloadId)
    {
        Navigation.NavigateTo($"/landing-zones/{workloadId}");
    }

    private void NavigateToResources(int landingZoneId)
    {
        Navigation.NavigateTo($"/resources/{landingZoneId}");
    }
}