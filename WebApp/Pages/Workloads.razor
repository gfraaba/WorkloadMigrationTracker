@page "/workloads"
@using Shared.DTOs
@using WebApp.Services
@inject WorkloadService WorkloadService
@inject NavigationManager Navigation

<h3>Workloads</h3>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Landing Zones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var workload in workloads)
        {
            <tr>
                <td>@workload.Name</td>
                <td>@workload.Description</td>
                <td>
                    @if (workload.LandingZonesCount > 0)
                    {
                        <button class="btn btn-link" @onclick="() => ToggleLandingZones(workload.WorkloadId)">
                            @((expandedWorkloadId == workload.WorkloadId) ? "Hide Landing Zones" : "View Landing Zones")
                        </button>
                        @if (expandedWorkloadId == workload.WorkloadId)
                        {
                            <ul>
                                @foreach (var landingZone in workload.WorkloadEnvironmentRegions)
                                {
                                    <li>
                                        @landingZone.EnvironmentTypeName - @landingZone.RegionName
                                        <button class="btn btn-sm btn-primary" @onclick="() => NavigateToAddResource(landingZone.WorkloadEnvironmentRegionId)">
                                            Add Resource
                                        </button>
                                    </li>
                                }
                            </ul>
                        }
                    }
                    else
                    {
                        <button class="btn btn-sm btn-success" @onclick="() => NavigateToAddLandingZone(workload.WorkloadId)">
                            Add Landing Zone
                        </button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<WorkloadDto> workloads = new();
    private int? expandedWorkloadId = null;

    private void ToggleLandingZones(int workloadId)
    {
        expandedWorkloadId = expandedWorkloadId == workloadId ? null : workloadId;
    }

    protected override async Task OnInitializedAsync()
    {
        workloads = await WorkloadService.GetWorkloadsAsync();
    }

    private void NavigateToAddResource(int workloadEnvironmentRegionId)
    {
        Navigation.NavigateTo($"/add-resource/{workloadEnvironmentRegionId}");
    }

    private void NavigateToAddLandingZone(int workloadId)
    {
        Navigation.NavigateTo($"/add-landing-zone/{workloadId}");
    }
}