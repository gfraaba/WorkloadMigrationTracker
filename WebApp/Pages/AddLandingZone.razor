@page "/add-landing-zone/{workloadId:int}"
@inject WorkloadService WorkloadService
@inject NavigationManager Navigation

<h3>Add Landing Zone</h3>

<EditForm Model="newLandingZone" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="environment" class="form-label">Environment</label>
        <select id="environment" class="form-control" @onchange="OnEnvironmentChange">
            <option value="0" disabled>Select Environment</option>
            @foreach (var env in availableEnvironments)
            {
                <option value="@env.EnvironmentTypeId">@env.EnvironmentName</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="region" class="form-label">Region</label>
        <select id="region" class="form-control" @bind="newLandingZone.RegionId">
            <option value="0" disabled>Select Region</option>
            @foreach (var region in availableRegions)
            {
                <option value="@region.RegionId">@region.Name</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newLandingZone.ResourceGroupName" />
    </div>

    <button type="submit" class="btn btn-primary">Add Landing Zone</button>
    <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
</EditForm>

@code {
    [Parameter] public int WorkloadId { get; set; }
    private WorkloadEnvironmentRegionDto newLandingZone = new WorkloadEnvironmentRegionDto
    {
        WorkloadEnvironmentRegionId = 0,
        EnvironmentTypeId = 0,
        RegionId = 0,
        AzureSubscriptionId = "",
        ResourceGroupName = ""
    };
    private Dictionary<int, EnvironmentRegionsDto> environmentRegionMapping = new();
    private List<(int EnvironmentTypeId, string EnvironmentName)> availableEnvironments = new();
    private List<AzureRegionDto> availableRegions = new();

    protected override async Task OnInitializedAsync()
    {
        // Set the WorkloadId in the DTO
        newLandingZone.WorkloadId = WorkloadId;

        // Fetch environment-region mapping
        var mapping = await WorkloadService.GetAvailableEnvironmentsAndRegionsAsync(WorkloadId);
        if (mapping != null)
        {
            environmentRegionMapping = mapping;
            availableEnvironments = mapping.Select(kvp => (kvp.Key, kvp.Value.EnvironmentName)).ToList();
        }
    }

    private void OnEnvironmentChange(ChangeEventArgs e)
    {
        // Parse the selected EnvironmentTypeId
        var selectedEnvironmentId = int.Parse(e.Value?.ToString() ?? "0");

        // Update the EnvironmentTypeId in the DTO
        newLandingZone.EnvironmentTypeId = selectedEnvironmentId;

        // Update the available regions based on the selected environment
        if (environmentRegionMapping.TryGetValue(selectedEnvironmentId, out var value))
        {
            availableRegions = value.Regions;
        }
        else
        {
            availableRegions.Clear();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Log the DTO being sent to the server
            Console.WriteLine("HandleValidSubmit: Preparing to send the following DTO to the server:");
            Console.WriteLine($"WorkloadId: {newLandingZone.WorkloadId}");
            Console.WriteLine($"EnvironmentTypeId: {newLandingZone.EnvironmentTypeId}");
            Console.WriteLine($"RegionId: {newLandingZone.RegionId}");
            Console.WriteLine($"AzureSubscriptionId: {newLandingZone.AzureSubscriptionId}");
            Console.WriteLine($"ResourceGroupName: {newLandingZone.ResourceGroupName}");

            // Send the DTO to the server
            await WorkloadService.AddLandingZoneAsync(newLandingZone);

            // Navigate back to the workloads page
            Navigation.NavigateTo("/workloads");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"HandleValidSubmit: Error occurred while adding landing zone - {ex.Message}");
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/workloads");
    }
}