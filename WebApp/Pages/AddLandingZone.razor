@page "/add-landing-zone/{workloadId:int}"
@using Shared.DTOs
@using WebApp.Services
@inject WorkloadService WorkloadService
@inject NavigationManager Navigation

<h3>Add Landing Zone</h3>

<EditForm Model="newLandingZone" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="environment" class="form-label">Environment</label>
        <select id="environment" class="form-control" @bind="newLandingZone.EnvironmentTypeId">
            <option value="0" disabled>Select Environment</option>
            @foreach (var env in environments)
            {
                <option value="@env.EnvironmentTypeId">@env.Name</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="region" class="form-label">Region</label>
        <select id="region" class="form-control" @bind="newLandingZone.RegionId">
            <option value="0" disabled>Select Region</option>
            @foreach (var region in regions)
            {
                <option value="@region.RegionId">@region.Name</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newLandingZone.ResourceGroupName" />
    </div>

    <button type="submit" class="btn btn-primary">Add Landing Zone</button>
    <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
</EditForm>

@code {
    [Parameter] public int WorkloadId { get; set; }
    private WorkloadEnvironmentRegionDto newLandingZone = new WorkloadEnvironmentRegionDto
    {
        WorkloadEnvironmentRegionId = 0,
        EnvironmentTypeId = 0,
        RegionId = 0,
        AzureSubscriptionId = "",
        ResourceGroupName = ""
    };
    private List<EnvironmentTypeDto> environments = new();
    private List<AzureRegionDto> regions = new();

    protected override async Task OnInitializedAsync()
    {
        newLandingZone.WorkloadId = WorkloadId;
        environments = await WorkloadService.GetEnvironmentsAsync();
        regions = await WorkloadService.GetRegionsAsync();
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"Submitting Landing Zone: WorkloadId={newLandingZone.WorkloadId}, EnvironmentTypeId={newLandingZone.EnvironmentTypeId}, RegionId={newLandingZone.RegionId}, ResourceGroupName={newLandingZone.ResourceGroupName}");
        await WorkloadService.AddLandingZoneAsync(newLandingZone);
        Navigation.NavigateTo("/workloads");
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/workloads");
    }
}