@page "/add-resource/{workloadEnvironmentRegionId:int}"
@using Shared.DTOs
@using WebApp.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components

@inject WorkloadService WorkloadService
@inject NavigationManager Navigation

<h3>Add Resource</h3>

<EditForm Model="newResource" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newResource.Name" />
    </div>
    <div class="mb-3">
        <label for="resourceType" class="form-label">Resource Type</label>
        <select id="resourceType" class="form-control" @onchange="HandleResourceTypeChange">
            <option value="" disabled>Select Resource Type</option>
            @foreach (var resourceType in resourceTypes)
            {
                <option value="@resourceType.TypeId">@resourceType.Name</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="environment" class="form-label">Environment</label>
        <select id="environment" class="form-control" @bind="selectedEnvironment">
            <option value="" disabled>Select Environment</option>
            @foreach (var env in environments)
            {
                <option value="@env.EnvironmentTypeId">@env.Name</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="region" class="form-label">Region</label>
        <select id="region" class="form-control" @bind="selectedRegion">
            <option value="" disabled>Select Region</option>
            @foreach (var region in regions)
            {
                <option value="@region.RegionId">@region.Name</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="status" class="form-label">Status</label>
        <select id="status" class="form-control" @bind="newResource.Status">
            <option value="" disabled>Select Status</option>
            @foreach (var status in statuses)
            {
                <option value="@status.Name">@status.Name</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Add Resource</button>
    <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
</EditForm>

@code {
    [Parameter] public int workloadEnvironmentRegionId { get; set; }
    private List<ResourceStatusDto> statuses = new();
    private ResourceDto newResource = new ResourceDto
    {
        Name = string.Empty,
        ResourceTypeId = 0,
        Status = string.Empty,
        WorkloadEnvironmentRegionId = 0
    };

    private List<EnvironmentTypeDto> environments = new();
    private List<AzureRegionDto> regions = new();
    private List<ResourceTypeDto> resourceTypes = new();
    private int? selectedEnvironment;
    private int? selectedRegion;

    protected override async Task OnInitializedAsync()
    {
        environments = await WorkloadService.GetEnvironmentsAsync();
        regions = await WorkloadService.GetRegionsAsync();
        resourceTypes = await WorkloadService.GetResourceTypesAsync();
        statuses = await WorkloadService.GetStatusesAsync();
        newResource.WorkloadEnvironmentRegionId = workloadEnvironmentRegionId;
    }

    private void HandleResourceTypeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var typeId))
        {
            newResource.ResourceTypeId = typeId;
            Console.WriteLine($"ResourceTypeId set to: {newResource.ResourceTypeId}");
        }
    }

    private async Task HandleValidSubmit()
    {
        // Map selected values to newResource properties
        newResource.WorkloadEnvironmentRegionId = workloadEnvironmentRegionId;

        Console.WriteLine($"Submitting Resource: Name={newResource.Name}, ResourceTypeId={newResource.ResourceTypeId}, Status={newResource.Status}, WorkloadEnvironmentRegionId={newResource.WorkloadEnvironmentRegionId}");
        await WorkloadService.AddResourceToWorkloadAsync(workloadEnvironmentRegionId, newResource);
        Navigation.NavigateTo($"/workloads");
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo($"/workloads");
    }
}