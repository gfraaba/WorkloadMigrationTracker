@page "/add-resource/{workloadEnvironmentRegionId:int}"
@inject WorkloadService WorkloadService
@inject NavigationManager Navigation

<h3>Add Resource</h3>

<EditForm Model="newResource" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newResource.Name" />
    </div>
    <div class="mb-3">
        <label for="resourceType" class="form-label">Resource Type</label>
        <select id="resourceType" class="form-control" @onchange="HandleResourceTypeChange">
            <option value="" disabled>Select Resource Type</option>
            @foreach (var resourceType in resourceTypes)
            {
                <option value="@resourceType.TypeId">@resourceType.Name</option>
            }
        </select>
    </div>
    @if (resourceProperties != null)
    {
        @foreach (var property in resourceProperties)
        {
            <div class="mb-3">
                <label for="@property.Name" class="form-label">@property.Name</label>
                @if (property.DataType == "string")
                {
                    <DynamicStringInput Value="@(dynamicProperties[property.Name]?.ToString() ?? string.Empty)"
                                        ValueChanged="@(value => UpdateDynamicProperty(property.Name, value))" />
                }
                else if (property.DataType == "int")
                {
                    <DynamicIntInput Value="@(dynamicProperties[property.Name] is int intValue ? intValue : 0)"
                                    ValueChanged="@(value => UpdateDynamicProperty(property.Name, value))" />
                }
                else
                {
                    <p class="text-danger">Unsupported data type: @property.DataType</p>
                }
            </div>
        }
    }
    <div class="mb-3">
        <label for="status" class="form-label">Status</label>
        <select id="status" class="form-control" @bind="newResource.Status">
            <option value="" disabled>Select Status</option>
            <option value="Unavailable" selected>Unavailable</option>
            @foreach (var status in statuses)
            {
                <option value="@status.Name">@status.Name</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Add Resource</button>
    <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
</EditForm>

@code {
    [Parameter] public int workloadEnvironmentRegionId { get; set; }
    private List<ResourceTypeDto> resourceTypes = new();
    private List<ResourceStatusDto> statuses = new();
    private List<ResourcePropertyDto>? resourceProperties = null;
    private Dictionary<string, object> dynamicProperties = new();
    private ResourceDto newResource = new ResourceDto
    {
        Name = string.Empty,
        ResourceTypeId = 0,
        Status = "Unavailable",
        WorkloadEnvironmentRegionId = 0
    };

    protected override async Task OnInitializedAsync()
    {
        resourceTypes = await WorkloadService.GetResourceTypesAsync();
        statuses = await WorkloadService.GetStatusesAsync();
        newResource.WorkloadEnvironmentRegionId = workloadEnvironmentRegionId;
    }

    private async Task HandleResourceTypeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var typeId))
        {
            newResource.ResourceTypeId = typeId;
            Console.WriteLine($"ResourceTypeId set to: {newResource.ResourceTypeId}");
            resourceProperties = await WorkloadService.GetResourcePropertiesAsync(typeId);

            if (resourceProperties == null || !resourceProperties.Any())
            {
                Console.WriteLine("No resource properties found!");
            }
            else
            {
                Console.WriteLine($"Loaded {resourceProperties.Count} resource properties.");
            }

            // Initialize dynamic properties with default values
            if (resourceProperties != null && resourceProperties.Any())
            {
                dynamicProperties = resourceProperties.ToDictionary(
                    p => p.Name,
                    p =>
                    {
                        if (p.DataType == "int" && int.TryParse(p.DefaultValue, out var intValue))
                        {
                            return (object)intValue;
                        }
                        else if (p.DataType == "string")
                        {
                            return (object)(p.DefaultValue ?? string.Empty);
                        }
                        return null!;
                    }
                );
            }
            else
            {
                dynamicProperties.Clear();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        // Map selected values to newResource properties
        newResource.Properties = dynamicProperties; // Include dynamic properties
        newResource.WorkloadEnvironmentRegionId = workloadEnvironmentRegionId;

        Console.WriteLine($"Submitting Resource: Name={newResource.Name}, ResourceTypeId={newResource.ResourceTypeId}, Status={newResource.Status}, WorkloadEnvironmentRegionId={newResource.WorkloadEnvironmentRegionId}");
        await WorkloadService.AddResourceAsync(newResource);
        Navigation.NavigateTo($"/workloads");
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo($"/workloads");
    }

    private void UpdateDynamicProperty(string propertyName, object value)
    {
        dynamicProperties[propertyName] = value;
    }
}